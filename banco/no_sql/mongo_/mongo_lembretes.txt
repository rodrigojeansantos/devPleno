********************************* Mongo Estudos **********************************

			*********** Entendendo ***********

OBS: Bson formato binario do mongo.
lookup: Fazer junção, mas não são bem vindas.
Referencia: Deleta a chave estrangeira e seus dependentes ficam orfaos.

****** Banco Relacional ******  MongoDB *********
Banco de dados		----> Banco de dados
Tabela, visão 		----> Coleção
Linha	       		----> Documentos (Json, Bson)
Coluna (Esquema Rigido) ----> Campo (Esquema Flexivel
Indice			----> Indice
Junção			----> Documento Embutido
Chave Estrangeira	----> Referencia
Partição		----> Sharding
************************************************************************************************
Dentro de um documentos temos atributos que esses atributos
podem ser um array que contem valores.


			*********** Querys ***********

IN:       db.users.find({email:{$in:["rodrigojeansantos@gmail.com", "rodrigo.santos72@fatec.sp.gov.br"]}})

And e OR: db.users.find({validated: true ,$or :[ {occupationSlug : "arquiteto"}, {occupationSlug: "design-de-interiores"} ]});

OR: db.estoque.find({$or: [ {"itensestoque.qtde": {$lt: 10}}, {"itensestoque.qtde": {$gt: 20}} ] })

count:  db.users.count({occupationSlug : "arquiteto"});
	db.users.aggregate([{$group : { _id : '$validated',count : {$sum : 1}} }]);
	db.users.aggregate([{$group: {_id: '$occupationSlug','total': {$sum : 1}}}]);


sub documentos:
	db.users.aggregate( [ { $unwind : "$dataAuth" }] )

************************************************************************************************
			*********** Inserção ***********
save: Se o id ja existir ele vai atualizar o banco, ou seja se eu coloco no 
documento que quero salvar ele atualiza. Se não existir o ID ele insere normal.

insert: vai salvar e pronto.

			*********** Update ***********
db.collection.update(<query>, <update>,{upsert: true})
update: Passo a <query>, as propriedades daquela documento que vai sofrer a troca.
E o upsert: true Se nenhum documento for encontrado naquela condição ele vai
inserir aquele documento


			*********** Find ***********
Mostrar coluna especifica
db.postagens.find({}, {titulo : true}).limit(3).sort({titulo: 1})

Mostrar coluna especifica e tirar id
db.postagens.find({}, {titulo : true, _id: false}).limit(3).sort({titulo: 1})

Procurar valor menor que dentro de array
db.estoque.find({categoria: 'roupas', "itensestoque.qtde":{$lt: 10} })

			*********** Find One *********
É muito performatico não tem algumas operações como cursor, formatação
e manipulação de dados.

db.postagens.findOne({titulo: 'Primeira Postagens'})

			*********** Agrupar ***********
db.transactions.aggregate(
[
    { $match : { status : 'approved' } },
    { $group : { _id : '$description' ,
    count : {$sum : 1}} }
]).limit(5000)


Ou mais sem match

db.transactions.aggregate(
[
    { $group : { _id : '$description' ,
    count : {$sum : 1}} }
])
.sort({count: -1})
// .limit(5000)
			*********** Insert *********
db.estoque.insert({
    item: "ABC1",
    detalhes: { modelo: "14Q3", fabricante: 'XYZ Empresa'},
    itensestoque: [{tamanho: "S", qtde: 25},{tamanho: "M", qtde: 50}],
    categoria: "roupa"
})

Usando uma variavel para inserir
var meusDocumentos = 
[
    {item: 'ABC2', 
     detalhes: {modelo: "14Q3", fabricante: "Mi Corporation"},
     itensestoque: [{tamanho: "M", qtde: 50}],
     categoria: "roupas"
    },
    {item: 'MNO2', 
     detalhes: {modelo: "14Q3", fabricante: "ABC Empresa"},
     itensestoque: [{tamanho: "S", qtde: 5}, {tamanho: "M", qtde: 5}],
     categoria: "roupas"
    },
    {item: 'IJM2', 
     detalhes: {modelo: "14Q2", fabricante: "M5 Comportation"},
     itensestoque: [{tamanho: "S", qtde: 5}, {tamanho: "L", qtde: 1}],
     categoria: "utensilios domesticos"
    },    
]

db.estoque.insert(meusDocumentos);

			*********** Insert Grandes Qtde *******
Para inserir milhoes de uma ves utilizar o operador bulk

var bulk = db.estoque.initializeUnorderedBulkOp();

bulk.insert({
    item: "Be10",
    detalhes: {modelo: '14Q2', fabricante: 'XYZ Empresas'},
    itensestoque: [{tamanho: "L", qtde: 5}],
    categoria: "roupas"
});

bulk.insert({
    item: "ZYT1",
    detalhes: {modelo: '14Q1', fabricante: 'ABC Empresas'},
    itensestoque: [{tamanho: "S", qtde: 5}, {tamanho: "M", qtde: 5}],
    categoria: "utensilios domesticos"
});

bulk.execute();


			*********** Update *********
db.estoque.update(
 { item: "MNO2"},
 {$set: {
     categoria: "eletrônicos",
     detalhes: { modelo: "14Q3", fabricante: "XYZ Empresas"}
    },
    $currentDate: { lastModified: true }
 }
)

Acessar subPropriedades para Update em um documento
db.estoque.update( { item: "ABC1"}, {$set: {"detalhes.modelo": "14Q2" }} )

		
		      *********** Update Vários Docs *********
Atualuzar multi documentos, varios documentos.
db.estoque.update(
 { categoria: "roupas"},
    { $set: { categoria: "eletrônicos" }, 
    $currentDate: { lastModified: true } },
    { multi: true }
 }
)

Quando utilizo o set é para algumas propriedades. Para atualizar o documento todo
faço como o exemplo abaixo.

db.estoque.update( { item: "Be10" },
 { item: "BE05", itensestoque: [{ tamanho: "S", qtde: 20}, { tamanho: "M", qtde: 10}],
   categoria: "eletrônicos"
 }
)

		      *********** Update Cadastrando *********
Quando não encontra nenhum documento na regra do Find inclui um documento.
db.estoque.update( { item: "TBD1" },
 { item: "TBD1",
   detalhes: { "modelo": "Estrutura de dados", grafica: "Kodac" },
   itensestoque: [{ tamanho: "S", qtde: 20}, { tamanho: "M", qtde: 10}],
   categoria: "biblioteca"
 }, {upsert: true}
)

			*********** Remover *********
Remover os documentos que atendam a um determinado predicado
db.estoque.remove({ type: "comida" })

Remover um único documento que atenda a um determinado predicado
db.estoque.remove({ type: "comida" }, 1)

Remover todos os documentos de uma collections
db.estoque.remove({})

Deletar a collection, ou seja, deixar de existir
db.estoque.drop()


			*********** Criando view *******

db.createView ( "contents_vw", "contents",[ 
{ $lookup:{ from: "quizzes", localField: "_id", foreignField: "contentId", as: "quizes"  }},
//{ $project: { "inventory_docs._id": 0, "inventory_docs.sku": 0 } }
])

************************************************************************************************
			*********** Operações *******
Basta colocar count no final das coisas
Count:  db.estoque.count();
	db.estoque.find({categoria: 'roupas', "itensestoque.qtde":{$lt: 10} }).count()

db.nuinvoices.aggregate([{$group: {_id: '$keyAccess','total': {$sum : 1}}}]).forEach(function(obj){
// console.log(obj.total)  
if(obj.total.value > 1){
console.log(`${obj._id} ${obj.total.value}`)}})

// Usuarios vom validated igual a false e que tem mais de um cadastro no BD
 db.users.aggregate([
     { $match : { validated : false } },
     { $group: { 
        _id: '$email',
        count: {'$sum': 1}, 
        }
     },
     { $match: {
        count: {'$gt': 1}
        }
     }
])