//http://localhost:4000/api/movies?title=rei
const bluebird = require('bluebird')
const repository = bluebird.promisifyAll(require('../repository/MovieRepository'))

function notFound(data){
  if(!data){
    let err = new Error('movie not found')
    err.status = 404
    throw err
  }
  return data
}

const MovieController = {
  list(req, res, next){
    let query = {}
    
    if (req.query.title)  
    query = { title: new RegExp(req.query.title, 'i') } // 'i' Case sensitive
      //repository.list(query, (err, data) => { if (err) return next(err);  res.json(data) })
      repository.listAsync(query)
        .then(data => res.json(data))
        .catch(next)
  },

byId(req, res, next){
  let id = req.params.id  
  // repository.byId(id, (err, data) => { if(!data){ let err = new Error('movie not found') err.status = 404 return next(err) } res.json(data)})
  repository.byIdAsync(id)
    .then(notFound)
    .then(data => res.json(data))
    .catch(next)
},

create(req, res, next){
  let body = req.body  
  repository.create(body, (err, data) => {
    res.status(201).json(data)
  })
},

patch(req, res, next){
  let id = req.params.id
  let body = req.body

  delete body._id

  repository.patch(id, body, (err, data) => {
    res.json(data)
  })
},

update(req, res, next){
  let id = req.params.id
  let body = req.body

  delete body._id

  repository.update(id, body, (err, data) => {
    res.json(data)
  })
},

delete(req, res, next){
  let id = req.params.id  
  repository.delete(id, (err, data) => {
    res.status(204).send('')    
  })
}

}

module.exports = MovieController